#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities

int tsp(int dist[N][N], int path[], int visited[], int pos, int count, int cost, int *min_cost) {
    if (count == N && dist[pos][0]) {
        if (cost + dist[pos][0] < *min_cost) {
            *min_cost = cost + dist[pos][0];
            for (int i = 0; i < N; i++) {
                path[i] = visited[i];
            }
            path[N] = 0;  // Return to start
        }
        return 0;
    }

    for (int city = 0; city < N; city++) {
        if (!visited[city] && dist[pos][city]) {
            visited[city] = city;
            tsp(dist, path, visited, city, count + 1, cost + dist[pos][city], min_cost);
            visited[city] = 0;
        }
    }
    return 0;
}

int main() {
    // Distance matrix (symmetric)
    int dist[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int visited[N+1] = {0};  // Track visited cities
    int path[N+1];           // Store the best path
    int min_cost = INT_MAX;

    visited[0] = 0; // Start from city 0

    tsp(dist, path, visited, 0, 1, 0, &min_cost);

    printf("Minimum cost: %d\n", min_cost);
    printf("Path: ");
    for (int i = 0; i <= N; i++) {
        printf("%d ", path[i]);
    }
    printf("\n");

    return 0;
}
