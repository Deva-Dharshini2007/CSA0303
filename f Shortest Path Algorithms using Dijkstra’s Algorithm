#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define MAX 100
#define INF INT_MAX

// Find the vertex with the minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[], int vertices) {
    int min = INF, min_index;

    for (int v = 0; v < vertices; v++)
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }

    return min_index;
}

// Dijkstra's algorithm
void dijkstra(int graph[MAX][MAX], int src, int vertices) {
    int dist[MAX];        // Output array: dist[i] will hold the shortest distance from src to i
    bool sptSet[MAX];     // sptSet[i] will be true if vertex i is included in shortest path tree

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < vertices; i++) {
        dist[i] = INF;
        sptSet[i] = false;
    }

    dist[src] = 0; // Distance from source to itself is always 0

    // Find shortest path for all vertices
    for (int count = 0; count < vertices - 1; count++) {
        int u = minDistance(dist, sptSet, vertices);
        sptSet[u] = true;

        // Update dist[v] only if it's not in sptSet, there's an edge from u to v, and total weight is smaller
        for (int v = 0; v < vertices; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INF &&
                dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    // Print the result
    printf("\nVertex \t Distance from Source %d\n", src);
    for (int i = 0; i < vertices; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Main function
int main() {
    int vertices, edges, src, u, v, weight;
    int graph[MAX][MAX] = {0};

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter each edge as (source destination weight):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d %d", &u, &v, &weight);
        graph[u][v] = weight;

        // For undirected graph, uncomment this line:
        // graph[v][u] = weight;
    }

    printf("Enter the source vertex: ");
    scanf("%d", &src);

    dijkstra(graph, src, vertices);

    return 0;
}
