#include <stdio.h>
#define SIZE 10

int hashTable[SIZE];

// Initialize hash table
void initialize() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1; // -1 indicates empty slot
}

// Hash function
int hashFunction(int key) {
    return key % SIZE;
}

// Insert using Linear Probing
void insert(int key) {
    int index = hashFunction(key);
    int startIndex = index;

    while (hashTable[index] != -1) { // Find next empty slot
        index = (index + 1) % SIZE;
        if (index == startIndex) { // Table full
            printf("Hash Table Overflow! Cannot insert %d.\n", key);
            return;
        }
    }

    hashTable[index] = key;
    printf("Inserted %d at index %d.\n", key, index);
}

// Display hash table
void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1)
            printf("Index %d: %d\n", i, hashTable[i]);
        else
            printf("Index %d: Empty\n", i);
    }
}

int main() {
    int choice, key;
    initialize();

    while (1) {
        printf("\nHashing using Linear Probing Menu:\n");
        printf("1. Insert\n");
        printf("2. Display\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                insert(key);
                break;
            case 2:
                display();
                break;
            case 3:
                return 0;
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}
